"""
Interfaces for Mimic.
"""



from zope.interface import Attribute, Interface


class IAPIMock(Interface):
    """
    An :obj:`IAPIMock` provides an API via an entry for services
    internal to Mimic in a tenant's service catalog.
    """

    def catalog_entries(tenant_id):  # pragma:nocover
        """
        Generate some :obj:`mimic.catalog.Entry` objects given the tenant ID.

        :param six.text_type tenant_id: the semi-internal tenant ID generated by
            Mimic.
        """

    def resource_for_region(region, uri_prefix,
                            session_store):  # pragma:nocover
        """
        Get a resource for the given region.
        """


class IEndpointTemplate(Interface):
    """
    AN :obj:`IEndpointTemplate` provides an interface for the OS-KSCATALOG
    Admin endpoint templates, defining the fields.

    Work-In-Progress: Implementation is unstable and subject to change.
    """
    id_key = Attribute("Unique Service ID")
    region_key = Attribute("Region the Endpoint services")
    type_key = Attribute("Service type, example: object-store")
    name_key = Attribute("Service Name, example: Cloud Files")
    enabled_key = Attribute("Whether the Endpoint is globally available")
    public_url = Attribute("Internet Facing URL")
    internal_url = Attribute("Intranet Facing URL")
    admin_url = Attribute("Service Adminsitration URL")
    tenant_alias = Attribute("Tenant Alias to be appended to the "
                             "endpoint URI")
    version_id = Attribute("Version Details")
    version_info = Attribute("URL to get the version information")
    version_list = Attribute("URL to determine which version is hosted "
                             "by the endpoint")

    def serialize(tenant_id=None):  # pragma:nocover
        """
        Serialize the endpoint template to a dictionary.

        :param text_type tenant_id: an optional parameter to limit the
            serialization to only values to a subset for tenant-specific
            template information.
        """

    def deserialize(data):  # pragma:nocover
        """
        Deserialize the endpoint template from a dictionary.

        :param dict data: a dictionary of values to import the template data
            from.
        """


class IExternalAPIMock(Interface):
    """
    An :obj:`IExternalAPIMock` provides an API via an entry for services
    external to Mimic in a tenant's service catalog.

    Work-In-Progress: Implementation is unstable and subject to change.
    """
    id_key = Attribute("Unique Service ID")
    name_key = Attribute("Name of the External API. Primarily used for "
                         "the internal mappings. Must be unique.")
    type_key = Attribute("Type of the Templatized External API. Primarily "
                         "used for the internal mappings. Must be unique.")

    def catalog_entries(tenant_id):  # pragma:nocover
        """
        Generate some :obj:`mimic.catalog.Entry` objects given the tenant ID.

        :param six.text_type tenant_id: the semi-internal tenant ID generated
            by Mimic.
        :returns: list of Service Catalog Entry objects
        :rtype: list
        """

    def uri_for_service(region, service_id):  # pragma:nocover
        """
        Get the URI for the service in a given region.

        :param six.text_type service_id: the ID of the service.
        :returns: URL to use if it exists, otherwise an empty string
        :rtype: six.text_type
        """

    def list_tenant_endpoints(tenant_id):  # pragma:nocover
        """
        List the tenant specific endpoints.

        :param six.text_type tenant_id: tenant id to operate on
        :returns: an iterable of the endpoints available for the specified
            tenant id
        :rtype: iterable
        """

    def enable_endpoint_for_tenant(tenant_id, template_id):  # pragma:nocover
        """
        Enable an endpoint for a specific tenant.

        :param six.text_type tenant_id: tenant id to operate on
        :param six.text_type template_id: endpoint template id to enable
        :raises: ValueError if the template id is not found
        """

    def disable_endpoint_for_tenant(tenant_id, template_id):  # pragma:nocover
        """
        Disable an endpoint for a specific tenant.

        :param six.text_type tenant_id: tenant id to operate on
        :param six.text_type template_id: endpoint template id to disable
        :raises: ValueError if template is not enabled for the tenant
        """

    def list_templates():  # pragma:nocover
        """
        List the available templates.

        :returns: an iterable of the endpoint templates
        :rtype: iterable
        """

    def add_template(endpoint_template):  # pragma:nocover
        """
        Add a new template for the external API.

        :param six.text_type endpoint_template: a :obj:`IEndpointTemplate` to add to the
            :obj:`IExternalAPIMock` instance
        :raises: ValueError if the endpoint template has already been added
        :raises: TypeError if the endpoint template does not implement
            the expected interface (IEndpointTempalte)
        """

    def update_template(endpoint_template):  # pragma:nocover
        """
        Update an existing template for the external API.

        :param six.text_type endpoint_template: a :obj:`IEndpointTemplate` to add to the
            :obj:`IExternalAPIMock` instance
        :raises: IndexError if the endpoint template does not already exist
        :raises: TypeError if the endpoint template does not implement
            the expected interface (IEndpointTempalte)
        """

    def remove_template(template_id):  # pragma:nocover
        """
        Remove the template for the external API.

        :param six.text_type template_id: the unique id of the endpoint template
            to be removed.
        :raises: IndexError if the template does not exist
        """


class ICredential(Interface):
    """
    An :obj:`ICredential` provides identity authentication credentials.
    """
    type_key = Attribute("The type key to look for in a JSON dictionary "
                         "representing the credential.")

    def get_session(session_store):  # pragma:nocover
        """
        Get a session corresponding to the user and tenant from the given
        session store.

        :param session_store: The store of all sessions for all tenants for
            all plugins across all regions.
        :type session_store: :class:`mimic.session.SessionStore`

        :return: A session corresponding to the user and plugin data for a
            single tenant for all plugins across all regions.
        :rtype: :class:`mimic.session.SessionStore`
        """


class IAPIDomainMock(Interface):
    """
    An :obj:`IAPIDomainMock` provides an API via a root resource with a fixed
    name ahead of time.

    Top level mocks will appear as
    ``http://your-mimic-host.example:your-mimic-port/domain/<your-api>``, where
    ``<your-api>`` is the result of :obj:`IAPIDomainMock.domain```()``.
    """

    def domain():               # pragma:nocover
        """
        This should be a domain name.  For example, if you were mocking an API
        typically present at ``https://api.foo.example.com/v2/``, this should
        return ``u"api.foo.example.com"``.

        :return: the domain name for this top-level mock.
        :rtype: :obj:`six.text_type`
        """

    def resource():             # pragma:nocover
        """
        The resource which would appear at the root of the domain.  For
        example, if you were mocking an API typically present at
        ``https://api.foo.example.com/v2/``, this should return a resource
        whose ``.getChild("v2", ...)`` returns the root of the API.

        :return: The resource for the root of the API implemented by this
                 :obj:`IAPIDomainMock`.
        :rtype: :obj:`twisted.web.iweb.IResource`
        """
